{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","getRandomNumber","Math","random","toFixed","slice","Pagination","total","perPage","currentPage","onPageChange","maxPages","ceil","className","cn","disabled","href","onClick","prevPage","map","page","active","items","App","useState","itemsPerPage","setItemsPerPage","setCurrentPage","startItem","startItemInfo","endItem","endItemInfo","id","value","onChange","event","target","num","htmlFor","item","ReactDOM","render","document","getElementById"],"mappings":"yLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,EAGF,SAASG,IACd,OAAQC,KAAKC,SAASC,QAAQ,IAAIC,MAAM,G,2BCA7BC,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QAGI,IAFJC,mBAEI,MAFU,EAEV,MADJC,oBACI,MADW,aACX,EACEC,EAAWT,KAAKU,KAAKL,EAAQC,GAcnC,OACE,qBAAIK,UAAU,aAAd,UACE,oBACEA,UAAWC,IAAG,YAAa,CACzBC,SAA0B,IAAhBN,IAFd,SAKE,mBACE,UAAQ,WACRI,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhBP,EACfQ,QAxBgB,WACF,IAAhBR,GACFC,GAAa,SAACQ,GAAD,OAAsBA,EAAW,MAiB5C,oBAUDvB,EAAW,EAAGgB,GAAUQ,KAAI,SAAAC,GAAI,OAC/B,oBACEP,UAAWC,IAAG,YAAa,CACzBO,OAAQZ,IAAgBW,IAF5B,SAME,mBACE,UAAQ,WACRP,UAAU,YACVG,KAAI,WAAMI,GACVH,QAAS,kBAAMP,EAAaU,IAJ9B,SAMGA,KAREnB,QAYT,oBACEY,UAAWC,IAAG,YAAa,CACzBC,SAAUN,IAAgBE,IAF9B,SAKE,mBACE,UAAQ,WACRE,UAAU,YACVG,KAAK,QACL,gBAAeP,IAAgBE,EAC/BM,QAlDY,WACdR,IAAgBE,GAClBD,GAAa,SAACQ,GAAD,OAAsBA,EAAW,MA2C5C,wBChEFI,EAAQ3B,EAAW,EADL,IAEjBwB,KAAI,SAAApB,GAAC,qBAAYA,MAEPwB,EAAgB,WAC3B,MAAwCC,mBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOf,EAAP,KAAoBkB,EAApB,KACMC,EAAYH,GAAgBhB,EAAc,GAC1CoB,EAAgB,EAAID,EACpBE,EAAUrB,EAAcgB,EACxBM,EAAcD,EAVF,MAUwCA,EAO1D,OACE,sBAAKjB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWJ,EADX,mBACiCoB,EADjC,cACoDE,EADpD,eArBc,GAqBd,OAIA,sBAAKlB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,wBACE,UAAQ,kBACRmB,GAAG,kBACHnB,UAAU,eACVoB,MAAOR,EACPS,SApBiB,SAACC,GAC1BT,GAAiBS,EAAMC,OAAOH,OAC9BN,EAAe,IAaT,SAOG,CAAC,EAAG,EAAG,GAAI,IAAIR,KAAI,SAAAkB,GAAG,OACrB,wBAAQJ,MAAOI,EAAf,SACGA,WAMT,uBAAOC,QAAQ,kBAAkBzB,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEN,MAhDY,GAiDZC,QAASiB,EACThB,YAAaA,EACbC,aAAciB,IAGhB,6BACGL,EAAMjB,MAAMuB,EAAWE,GACrBX,KAAI,SAAAoB,GAAI,OACP,oBACE,UAAQ,OADV,SAIGA,GAFItC,cC7DnBuC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.2c88363f.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n\nexport function getRandomNumber(): number {\n  return +Math.random().toFixed(16).slice(2);\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { getNumbers, getRandomNumber } from '../../utils';\n\ntype Props = {\n  total: number;\n  perPage: number;\n  currentPage: number;\n  onPageChange: React.Dispatch<React.SetStateAction<number>>;\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage = 1,\n  onPageChange = () => {},\n}) => {\n  const maxPages = Math.ceil(total / perPage);\n\n  const getPreviousPage = () => {\n    if (currentPage !== 1) {\n      onPageChange((prevPage: number) => prevPage - 1);\n    }\n  };\n\n  const getNextPage = () => {\n    if (currentPage !== maxPages) {\n      onPageChange((prevPage: number) => prevPage + 1);\n    }\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li\n        className={cn('page-item', {\n          disabled: currentPage === 1,\n        })}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={currentPage === 1}\n          onClick={getPreviousPage}\n        >\n          «\n        </a>\n      </li>\n      {getNumbers(1, maxPages).map(page => (\n        <li\n          className={cn('page-item', {\n            active: currentPage === page,\n          })}\n          key={getRandomNumber()}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${page}`}\n            onClick={() => onPageChange(page)}\n          >\n            {page}\n          </a>\n        </li>\n      ))}\n      <li\n        className={cn('page-item', {\n          disabled: currentPage === maxPages,\n        })}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={currentPage === maxPages}\n          onClick={getNextPage}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers, getRandomNumber } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst TOTAL_PAGES = 42;\nconst items = getNumbers(1, TOTAL_PAGES)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [itemsPerPage, setItemsPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n  const startItem = itemsPerPage * (currentPage - 1);\n  const startItemInfo = 1 + startItem;\n  const endItem = currentPage * itemsPerPage;\n  const endItemInfo = endItem > TOTAL_PAGES ? TOTAL_PAGES : endItem;\n\n  const handleItemsPerPage = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setItemsPerPage(+event.target.value);\n    setCurrentPage(1);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${startItemInfo} - ${endItemInfo} of ${TOTAL_PAGES})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={itemsPerPage}\n            onChange={handleItemsPerPage}\n          >\n            {[3, 5, 10, 20].map(num => (\n              <option value={num}>\n                {num}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={TOTAL_PAGES}\n        perPage={itemsPerPage}\n        currentPage={currentPage}\n        onPageChange={setCurrentPage}\n      />\n\n      <ul>\n        {items.slice(startItem, endItem)\n          .map(item => (\n            <li\n              data-cy=\"item\"\n              key={getRandomNumber()}\n            >\n              {item}\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}